##################
Pre-Implant Help
##################
The help is split out into two main components, "Pre-Implant Help" and "Post-Implant Help". This is basically depending on when you type help, will depend on the help that is provided. 

To obtain the help in either sections type ``Help`` or ``?``.

The "Pre-Implant" help menu allows you to configure various auto-runs, double check the server configuration and make and significant changes to the C2 server. It also allows you to test your configuration by issuing PwnSelf to obtain an implant.
	
Other settings that can be altered are C2 default beacon time, Clockwork SMS API key and mobile number for text message alerts of new implants.


Main Menu
###############
Use Implant by <id>, e.g. 1
Use Multiple Implants by <id>,<id>,<id>, e.g. 1,2,5
Use ALL Implants by ALL


Auto-Runs
###############
We have now implemented the concept of Auto-Runs. This allows the user of PoshC2 to automate various tasks when an implant first comes in. A few use cases of this could be:

auto migrate from PowerShell
capturing a screenshot for situational awareness
install persistence
Essentially, any command that can be issued within PoshC2 can be turned into an Auto-Run.

This menu can be found on the pre-implant help menu. An example of this menu has been shown below:

AutoMigrate-FromPowershell (AM)
*********************************
The auto migrate from PowerShell feature has been added and by default will start another process in "netsh.exe" unless otherwise stated by the ``-newprocess`` parameter. This utilises unmanaged PowerShell via the C++ Reflective DLL.



Server Commands:
####################

Show-ServerInfo
*****************

History
*****************

Output-To-HTML
*****************

Set-ClockworkSMSApiKey df2----
**********************************

Set-ClockworkSMSNumber 44789----
**********************************

Set-DefaultBeacon 60
**************************
Set-DefaultBeacon 60



ListModules
**************
The ``ListModules`` command allows the user to view the Powershell modules that reside in the modules folder, within the PoshC2 folder tree. We have provided quiet a few Powershell modules that most of you will recognise such as Mimikatz and PowerUp, and some you will not have seen before. One of the nice features of PoshC2 is the ability for the user to create their own Powershell modules and use them within PoshC2. Simply copy the modules you want into the modules folder and you'll be able to load them into a running implant with the 'LoadModule' command, which is discussed further in this documentation.

.. code-block:: python

	ListModules

PwnSelf / P
*******************
The ``PwnSelf`` command or aliased to ``P`` will just execute the default batch file that is created to test comms. 

Creds
********
Creds -Action <dump/add/del/search> -Username <username> -password/-hash

Output-To-HTML
*****************
With this command we have a simple but very detailed report of the executed commands and output for each individual implant. The reports are generated per implant.


CreateProxyPayload
************************
The ``CreateProxyPayload`` command was created to allow an implant to traverse an authenticated proxy when the implant is running under the SYSTEM account. Under normal circumstances the SYSTEM account shouldn't be authenticated on a domain level proxy server and pass through, so we created the CreateProxyPayload command to allow the attacker to provide a set of valid proxy credentials within the proxyurl and thus allows an implant to traverse any authenticated proxy server. We would use this technique when attempting lateral movement as well as privilege escalation techniques. 

By default, this will create a new Bat file, standalone executable, service executable, 64bit DLL, 32bit DLL and Shellcode. The user and password parameters are optional and can be blank if needed. 

.. code-block:: python

	CreateProxyPayload -user <dom\user> -pass <pass> -proxyurl <http://10.0.0.1:8080>

**Parameters:**

- **-proxyurl** http://10.0.0.1:8080 

**Optional Parameters:**

- **-user** dom\test 
- **-pass** pass 

CreateNewPayload
************************
This ``CreateNewPayload`` payload generates a number of new payloads that are setup to beacon to a different location. This is for when you are trying to remove attribution on various assets and you want some beaconing to different locations but to end up at the same PoshC2 instance. You would need to configure your C2 proxy servers to all come back to the same host. 

By default, this will create a new Bat file, standalone executable, 64bit DLL, 32bit DLL and Shellcode. The user and password parameters are optional and can be blank if needed. 

.. code-block:: python

	CreateNewPayload -hostname https://hostname.com -domainfrontheader <url>

**Parameters:**

- **-hostname** https://www.c2.com 

**Optional Parameters:**

- **-domainfrontheader** blah.cloudfront.com 

